name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 scraper/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 scraper/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check code formatting with black
      run: |
        black --check scraper/ tests/ examples/

    - name: Check import sorting with isort
      run: |
        isort --check-only scraper/ tests/ examples/

    - name: Run tests with pytest
      run: |
        pytest tests/ --cov=scraper --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run integration tests
      run: |
        # Test CLI functionality
        python -m scraper.cli --help
        
        # Test basic scraping (with limited data to avoid overloading wiki)
        python examples/basic_usage.py

    - name: Test Docker build
      run: |
        docker build -t pysmash-scraper .

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install safety
      run: |
        python -m pip install --upgrade pip
        pip install safety

    - name: Run safety check
      run: |
        pip install -r requirements.txt
        safety check

  deploy:
    runs-on: ubuntu-latest
    needs: [test, integration-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    # Uncomment when ready to publish
    # - name: Publish to PyPI
    #   env:
    #     TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
    #     TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
    #   run: |
    #     twine upload dist/*
